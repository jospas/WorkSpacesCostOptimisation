service: aws-workspaces-optimisation

provider:
  name: aws
  region: ${opt:region, 'ap-southeast-2'}
  endpointType: REGIONAL
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'aws-josh'}
  apiKeys:
    - name: ${self:provider.stage}-${self:service}
      description: 'API Key for WorkSpaces cost optimisation'

package:
  individually: true 

functions:
  optimiseworkspaces:
    handler: code/WorkSpacesUsageLambda.handler
    name: '${self:provider.stage}-${self:service}-function'
    description: 'Checks daily to optimise workspaces usage'
    role: !GetAtt LambdaRole.Arn
    events:
      - schedule: 
          name: '${self:provider.stage}-${self:service}-schedule'
          rate: 'rate(1 hour)'
    package:
      exclude:
        - '**'
        - '!node_modules/**'
        - '!code/WorkSpacesUsageLambda.js'
        - '!code/WorkSpacesUsageModule.js'
        - '!pricing/**'
      excludeDevDependencies: true
    memorySize: 2048
    timeout: 900
    environment:
      REGION: !Ref 'AWS::Region'
      DIRECTORY_ID: 'updateme'
      WINDOWS_BYOL: 'false'
      BUCKET: !Ref S3Bucket
      KEY_PREFIX: 'apps/workspaces/usage/'
      STAGE: '${self:provider.stage}'
      TEMP_ACCESS_KEY: ''
      TEMP_SECRET_KEY: ''

  getavailabledata:
    handler: code/GetAvailableDataLambda.handler
    name: '${self:provider.stage}-${self:service}-getavailabledata'
    description: 'Fetches the available data in S3'
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: workspaces/data
          method: get
          private: true   
          cors: true 
    package:
      exclude:
        - '**'
        - '!node_modules/**'
        - '!code/GetAvailableDataLambda.js'
      excludeDevDependencies: true
    memorySize: 512
    timeout: 29
    environment:
      REGION: !Ref 'AWS::Region'
      BUCKET: !Ref S3Bucket
      KEY_PREFIX: 'apps/workspaces/usage/'
      STAGE: '${self:provider.stage}'

resources:
  Description: 'Cost optimisation tooling for Amazon WorkSpaces'
  Resources:
    LambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join [ '-', [ '${self:provider.stage}', '${self:service}', !Ref 'AWS::Region', 'role' ]]
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: 'Allow'
              Principal: 
                Service: 
                  - 'lambda.amazonaws.com'
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref LambdaPolicy 

    LambdaPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        ManagedPolicyName: !Join [ '-', [ '${self:provider.stage}', '${self:service}', !Ref 'AWS::Region', 'policy' ]]
        Description: 'Managed policy for lambda execution'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 
                - !Join [ ':', [ 'arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group:/aws/lambda/*:*:*' ] ]
            - Effect: Allow
              Action:
                - workspaces:DescribeWorkspaces
                - workspaces:ModifyWorkspaceProperties
                - cloudwatch:GetMetricStatistics
              Resource: 
                - '*'
            - Effect: Allow
              Action:
                - s3:*
              Resource: 
                - !GetAtt S3Bucket.Arn
                - !Join [ '', [ !GetAtt S3Bucket.Arn, '/*' ] ]

    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '-', [ '${self:provider.stage}', '${self:service}', !Ref AWS::Region, !Ref AWS::AccountId ]]
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
