service: aws-workspaces-optimisation

plugins:
  - serverless-parameters

provider:
  name: aws
  region: ${opt:region, 'ap-southeast-2'}
  runtime: nodejs10.x
  stage: dev
  profile: aws-josh

package:
  individually: true 

custom:
  stage: '${opt:stage, self:provider.stage}'

  parameters:
    DirectoryId:
      Type: String
      Default: ${opt:DirectoryId, 'Unknown'}
      Description: 'The id of the directory to optimise'
    WindowsBYOL:
      Type: String
      Default: ${opt:WindowsBYOL, 'false'}
      Description: 'Enable to use Windows BYOL pricing'

functions:
  optimiseworkspaces:
    handler: code/WorkSpacesUsageLambda.handler
    name: '${self:custom.stage}-${self:service}-function'
    description: 'Checks daily to optimise workspaces usage'
    role: !GetAtt LambdaRole.Arn
    events:
      - schedule: 
          name: '${self:custom.stage}-${self:service}-schedule'
          rate: 'cron(0 7 * * ? *)'
    package:
      exclude:
        - '**'
        - '!node_modules/**'
        - '!code/WorkSpacesUsageLambda.js'
        - '!code/WorkSpacesUsageModule.js'
      excludeDevDependencies: true
    memorySize: 512
    timeout: 900
    environment:
      REGION: !Ref 'AWS::Region'
      DIRECTORY_ID: !Ref 'DirectoryId'
      WINDOWS_BYOL: !Ref 'WindowsBYOL'
      STAGE: '${self:custom.stage}'
      TEMP_ACCESS_KEY: ''
      TEMP_SECRET_KEY: ''

resources:
  Description: 'Cost optimisation tooling for Amazon WorkSpaces'
  Resources:
    LambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join [ '', [ !Ref 'AWS::StackName', '-', !Ref 'AWS::Region', '-role' ]]
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: 'Allow'
              Principal: 
                Service: 
                  - 'lambda.amazonaws.com'
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref LambdaPolicy 

    LambdaPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        ManagedPolicyName: !Join [ '', [ !Ref 'AWS::StackName', '-', !Ref 'AWS::Region', '-policy' ]]
        Description: 'Managed policy for lambda execution'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 
                - !Join [ ':', [ 'arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group:/aws/lambda/*:*:*' ] ]
            - Effect: Allow
              Action:
                - workspaces:DescribeWorkspaces
                - workspaces:ModifyWorkspaceProperties
                - cloudwatch:GetMetricStatistics
              Resource: 
                - '*'
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: 
                - !GetAtt WorkSpacesUsageDynamoDBTable.Arn
                - !Join [ '', [ !GetAtt WorkSpacesUsageDynamoDBTable.Arn, '/index/*' ] ]

    WorkSpacesUsageDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: '${self:custom.stage}-workspaces-usage'
        AttributeDefinitions:
          - AttributeName: workspaceId
            AttributeType: S
          - AttributeName: period
            AttributeType: S             
        KeySchema:
          - AttributeName: workspaceId
            KeyType: HASH
          - AttributeName: period
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: periodIndex
            KeySchema:
            - AttributeName: period
              KeyType: HASH
            - AttributeName: workspaceId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    S3BucketLake:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '', [ '${self:custom.stage}-workspaces-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
